{"name":"Kisax","tagline":"Kindly Simple API for XML (SAX)  one header parser","body":"### Welcome to KiSAX.\r\nKiSAX is kindly one header SAX parser for various valid and invalid XML documents. \r\n\r\nThe following \"Hello, world\" example prints XML structure to stdout:\r\n```C++\r\n#include <iostream>\r\n#include <fstream>\r\n#include \"kisax.h\"\r\nusing namespace std;\r\n// Simple example of printing XML structure to stdout\r\nclass PrintXmlStructure: public KiSAX::Parser\r\n{\r\nprivate:\r\n    virtual void documentStart()\r\n    {\r\n        cout<<\"Document start\\n\";\r\n    }\r\n    virtual void documentEnd()\r\n    {\r\n        cout<<\"Document end\\n\";\r\n    }\r\n    virtual void elementStart(const std::string &tagname, const stringmap &attributes)\r\n    {\r\n        cout<<\"Tag start: \"<<tagname<<'\\n';\r\n    }\r\n    virtual void elementEnd(const std::string &tagname)\r\n    {\r\n        cout<<\"Tag end: \"<<tagname<<'\\n';\r\n        // stop parsing if tag \"MyStopTag\" is handled\r\n        if (tagname == \"MyStopTag\") stop();\r\n    }\r\n    virtual void textHandle(const std::string &text)\r\n    {\r\n        cout<<\"Raw text: \"<<text<<'\\n';\r\n    }\r\n};\r\nint main()\r\n{\r\n    std::ifstream inputFile(\"example.xml\");\r\n    PrintXmlStructure inst;\r\n    inst.bind(inputFile);\r\n    inst.parse();\r\n    return 0;\r\n}\r\n```\r\n### Documentation\r\n[Let's see it](doc/html/index.html)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}